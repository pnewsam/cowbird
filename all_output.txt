Based on the specification and core classes, functions, and methods, here is the file structure for the app:

```
app/
├── src/
│   ├── components/
│   │   ├── Login.js
│   │   ├── Tweet.js
│   │   ├── TweetQueue.js
│   │   └── ...
│   ├── pages/
│   │   ├── HomePage.js
│   │   ├── LoginPage.js
│   │   └── ...
│   ├── App.js
│   ├── index.js
│   └── ...
├── tauri.conf.json
├── package.json
└── ...
```

Explanation of files and their contents:

1. `src/components/Login.js`: A React component that displays a login form and handles user authentication.
```jsx
import React, { useState } from 'react';
import { useTauri } from 'tauri-react';

function Login() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const { invoke } = useTauri();

  const handleLogin = async (e) => {
    e.preventDefault();
    const response = await invoke('login', { username, password });
    if (response.success) {
      console.log('Login successful!');
    } else {
      console.error('Login failed!');
    }
  };

  return (
    <form onSubmit={handleLogin}>
      <label>
        Username:
        <input type="text" value={username} onChange={(e) => setUsername(e.target.value)} />
      </label>
      <label>
        Password:
        <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
      </label>
      <button type="submit">Log In</button>
    </form>
  );
}

export default Login;
```

2. `src/components/Tweet.js`: A React component that displays a form for creating a new tweet and handles tweet creation and publishing.
```jsx
import React, { useState } from 'react';
import { useTauri } from 'tauri-react';

function Tweet() {
  const [text, setText] = useState('');
  const { invoke } = useTauri();

  const handleCreate = async (e) => {
    e.preventDefault();
    const response = await invoke('createTweet', { text });
    if (response.success) {
      console.log('Tweet created!');
    } else {
      console.error('Tweet creation failed!');
    }
  };

  const handlePublish = async (e) => {
    e.preventDefault();
    const response = await invoke('publishTweet');
    if (response.success) {
      console.log('Tweet published!');
    } else {
      console.error('Tweet publishing failed!');
    }
  };

  return (
    <form onSubmit={handleCreate}>
      <label>
        Text:
        <input type="text" value={text} onChange={(e) => setText(e.target.value)} />
      </label>
      <button type="submit">Create Tweet</button>
      <button onClick={handlePublish}>Publish Tweets</button>
    </form>
  );
}

export default Tweet;
```

3. `src/components/TweetQueue.js`: A React component that displays the user's tweet queue and handles tweet ordering and removal.
```jsx
import React from 'react';
import { useTauri } from 'tauri-react';

function TweetQueue() {
  const { state, invoke } = useTauri();
  const { tweets } = state;

  const handleReorder = async (newOrder) => {
    const response = await invoke('reorderTweets', { newOrder });
    if (response.success) {
      console.log('Tweet queue reordered!');
    } else {
      console.error('Tweet queue reordering failed!');
    }
  };

  const handleRemove = async (tweet) => {
    const response = await invoke('removeTweet', { tweet });
    if (response.success) {
      console.log('Tweet removed!');
    } else {
      console.error('Tweet removal failed!');
    }
  };

  return (
    <ul>
      {tweets.map((tweet) => (
        <li key={tweet.id}>
          {tweet.text}
          <button onClick={() => handleRemove(tweet)}>Remove</button>
        </li>
      ))}
      <button onClick={() => handleReorder(tweets.reverse())}>Reverse Order</button>
    </ul>
  );
}

export default TweetQueue;
```

4. `src/pages/HomePage.js`: A React page that displays the tweet creation form and tweet queue.
```jsx
import React from 'react';
import Tweet from '../components/Tweet';
import TweetQueue from '../components/TweetQueue';

function HomePage() {
  return (
    <div>
      <h1>Create a new tweet:</h1>
      <Tweet />
      <h1>Your tweet queue:</h1>
      <TweetQueue />
    </div>
  );
}

export default HomePage;
```

5. `src/pages/LoginPage.js`: A React page that displays the login form.
```jsx
import React from 'react';
import Login from '../components/Login';

function LoginPage() {
  return (
    <div>
      <h1>Log in to Twitter:</h1>
      <Login />
    </div>
  );
}

export default LoginPage;
```

6. `src/App.js`: The main React component that handles routing between pages.
```jsx
import React from 'react';
import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';
import HomePage from './pages/HomePage';
import LoginPage from './pages/LoginPage';

function App() {
  return (
    <Router>
      <Switch>
        <Route path="/login">
          <LoginPage />
        </Route>
        <Route path="/">
          <HomePage />
        </Route>
      </Switch>
    </Router>
  );
}

export default App;
```

7. `src/index.js`: The entry point for the React app that renders the `App` component.
```jsx
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
```

8. `tauri.conf.json`: The configuration file for the Tauri app that specifies the app name, window settings, and API endpoints.
```json
{
  "name": "tweet-queue",
  "window": {
    "title": "Tweet Queue",
    "width": 800,
    "height": 600
  },
  "endpoints": {
    "login": {
      "function": "login",
      "path": "/login"
    },
    "createTweet": {
      "function": "create_tweet",
      "path": "/tweets/create"
    },
    "publishTweet": {
      "function": "publish_tweets",
      "path": "/tweets/publish"
    },
    "reorderTweets": {
      "function": "reorder_tweets",
      "path": "/tweets/reorder"
    },
    "removeTweet": {
      "function": "remove_tweet",
      "path": "/tweets/remove"
    }
  }
}
```

9. `package.json`: The package.json file that specifies the dependencies for the app, including Tauri and React.
```json
{
  "name": "tweet-queue",
  "version": "1.0.0",
  "description": "A mobile app for creating and publishing tweets",
  "main": "index.js",
  "scripts": {
    "start": "tauri dev",
    "build": "tauri build"
  },
  "dependencies": {
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-router-dom": "^5.3.0",
    "tauri": "^1.0.0-beta.5",
    "tauri-react": "^1.0.0-beta.5"
  },
  "devDependencies": {
    "@tauri-apps/api": "^1.0.0-beta.5"
  }
}
```

Note that the above code is just an example and may not cover all edge cases. It's important to thoroughly test the app and ensure that all parts of the architecture are present and functional.